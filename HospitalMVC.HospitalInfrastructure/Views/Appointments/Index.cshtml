@model IEnumerable<HospitalDomain.Model.Appointment>
@using HospitalDomain.Utils  <!-- Ensure namespace is included -->
@{
    ViewData["Title"] = "Appointments";

    // Check if any appointments can be approved or canceled
    var canApproveAny = Utils.CheckRole.IsInRoles(User, new string[] { Utils.Constants.Admin, Utils.Constants.Manager })
        && Model.Any(a => a.AppointmentState == 1); // Pending only
    var canCancelAny = Utils.CheckRole.IsInRoles(User, new string[] { Utils.Constants.Admin, Utils.Constants.Manager, Utils.Constants.Doctor })
        && Model.Any(a => a.AppointmentState <= 3); // Not Completed
}

<h1 class="page-title">Appointments</h1>

<style>
    .no-appointments {
        text-align: center;
        padding: 20px;
        background-color: #f8f9fa; /* Light gray background */
        border: 1px solid #ddd; /* Light border */
        border-radius: 8px;
        margin: 20px auto;
        max-width: 500px;
        box-shadow: 0 4px 6px rgba(0, 0, 0, 0.1); /* Soft shadow for depth */
    }

        .no-appointments p {
            font-size: 18px;
            color: #333;
            margin-bottom: 15px;
        }

        .no-appointments .btn {
            font-size: 16px;
            padding: 10px 20px;
        }

    /* Custom Button Styles */
    .btn-approve {
        color: #fff;
        background-color: #28a745; /* Green for Approve */
        border: 1px solid #218838; /* Darker green border */
        padding: 4px 10px;
        border-radius: 4px;
        text-decoration: none;
        font-size: 14px;
        transition: background-color 0.3s ease;
        cursor: pointer;
    }

        .btn-approve:hover {
            background-color: #218838; /* Darker green on hover */
            text-decoration: none;
            color: #fff;
        }

    .btn-cancel {
        color: #fff;
        background-color: #dc3545; /* Red for Cancel */
        border: 1px solid #c82333; /* Darker red border */
        padding: 4px 10px;
        border-radius: 4px;
        text-decoration: none;
        font-size: 14px;
        transition: background-color 0.3s ease;
        cursor: pointer;
    }

        .btn-cancel:hover {
            background-color: #c82333; /* Darker red on hover */
            text-decoration: none;
            color: #fff;
        }
</style>

@if (Model.Any())
{
    <table class="table department-table">
        <thead class="table-header">
            <tr>
                <th>@Html.DisplayNameFor(model => model.Date)</th>
                <th>@Html.DisplayNameFor(model => model.Time)</th>
                <th>@Html.DisplayNameFor(model => model.Reason)</th>
                <th>Doctor Name</th>
                <th>Patient Name</th>
                <th>Room Type</th>
                <th>Appointment State</th>
                <th>Actions</th>
                @if (canApproveAny)
                {
                    <th>Approval</th>
                }
                @if (canCancelAny)
                {
                    <th>Cancellation</th>
                }
            </tr>
        </thead>
        <tbody>
            @foreach (var item in Model)
            {
                <!-- Get the state name from AppointmentStates -->
                var state = HospitalDomain.Utils.AppointmentStates.States
                .FirstOrDefault(s => s.Item1 == item.AppointmentState)?.Item2 ?? "Unknown";
                var stateClass = $"state-{state.ToLower()}";

                <tr>
                    <td>@Html.DisplayFor(modelItem => item.Date)</td>
                    <td>@Html.DisplayFor(modelItem => item.Time)</td>
                    <td>@Html.DisplayFor(modelItem => item.Reason)</td>
                    <td>@Html.DisplayFor(modelItem => item.DoctorNavigation.Name)</td>
                    <td>@Html.DisplayFor(modelItem => item.PatientNavigation.Name)</td>
                    <td>@Html.DisplayFor(modelItem => item.RoomNavigation.Type)</td>
                    <td><span class="@stateClass">@state</span></td>
                    <td class="action-links">
                        @Html.ActionLink("Edit", "Edit", new { id = item.Id }) |
                        @Html.ActionLink("Delete", "Delete", new { id = item.Id })
                    </td>
                    @if (canApproveAny)
                    {
                        <td>
                            @{
                                var isAuthorized = Utils.CheckRole.IsInRoles(User, new string[] { Utils.Constants.Admin, Utils.Constants.Manager });
                                var canApprove = isAuthorized && item.AppointmentState == 1; // Show for Pending only
                            }
                            @if (canApprove)
                            {
                                <a onclick="approve(@item.Id)" class="btn-approve">Approve</a>
                            }
                        </td>
                    }
                    @if (canCancelAny)
                    {
                        <td>
                            @{
                                var isAuthorized = Utils.CheckRole.IsInRoles(User, new string[] { Utils.Constants.Admin, Utils.Constants.Manager, Utils.Constants.Doctor });
                                var canCancel = isAuthorized && item.AppointmentState <= 3; // Show unless Completed
                            }
                            @if (canCancel)
                            {
                                <a onclick="cancel(@item.Id)" class="btn-cancel">Cancel</a>
                            }
                        </td>
                    }
                </tr>
            }
        </tbody>
    </table>
    <p>
        <a class="btn btn-primary" asp-action="SelectDoctor">Create New Appointment</a>
    </p>
}
else
{
    <div class="no-appointments">
        <p>There are no appointments. Want to create one?</p>
        <a class="btn btn-primary" asp-action="SelectDoctor">Create New Appointment</a>
    </div>
}

@section Scripts {
    <script>
        function approve(id) {
            $.ajax({
                url: '@Url.Action("Approve", "Appointments")',
                type: "GET",
                data: { id: id },
                success: function (response) {
                    location.reload(); // Reloads the page to reflect the updated state
                },
                error: function (xhr, status, error) {
                    alert("Error approving appointment: " + error);
                }
            });
        }

        function cancel(id) {
            $.ajax({
                url: '@Url.Action("Cancel", "Appointments")',
                type: "GET",
                data: { id: id },
                success: function (response) {
                    location.reload(); // Reloads the page to reflect the updated state
                },
                error: function (xhr, status, error) {
                    alert("Error canceling appointment: " + error);
                }
            });
        }
    </script>
}