@model HospitalMVC.ViewModels.HomeIndexViewModel
@using HospitalDomain.Utils  <!-- Ensure namespace is included -->
@{
    ViewData["Title"] = "Hospital";

    var canApproveAny = (Model is null || (Utils.CheckRole.IsInRoles(User, new string[] { Utils.Constants.Admin, Utils.Constants.Manager })
        && Model.Appointments.Any(a => a.AppointmentState == 1)));
    var canCancelAny = (Model is null || (Utils.CheckRole.IsInRoles(User, new string[] { Utils.Constants.Admin, Utils.Constants.Manager, Utils.Constants.Doctor })
        && Model.Appointments.Any(a => a.AppointmentState <= 3)));
}

<style>
    body {
        font-family: Arial, sans-serif;
        background-color: #f4f8fb;
        margin: 0;
        padding: 0;
    }

    .page-title {
        font-size: 2.8rem;
        font-weight: bold;
        color: #0077cc;
        text-align: center;
        margin-bottom: 30px;
    }

    .description-text {
        font-size: 1.2rem;
        color: #555;
        text-align: center;
        margin-bottom: 50px;
    }

    .content-section {
        display: flex;
        justify-content: space-between;
        align-items: flex-start;
        gap: 30px;
        background: #fff;
        padding: 30px;
        border-radius: 10px;
        box-shadow: 0 4px 10px rgba(0, 0, 0, 0.1);
    }

    .content-image {
        flex: 2;
        text-align: center;
    }

        .content-image img {
            width: 100%;
            max-width: 450px;
            height: auto;
            border-radius: 10px;
            box-shadow: 0 4px 8px rgba(0, 0, 0, 0.1);
        }

    .content-text {
        flex: 3;
        display: flex;
        flex-direction: column;
        justify-content: flex-start;
        height: 100%;
        position: relative;
        min-height: 300px;
    }

    .text-content {
        font-size: 1.2rem;
        color: #444;
        text-align: justify;
        line-height: 1.6;
        margin-bottom: 20px;
    }

    .options-list {
        display: flex;
        flex-direction: column;
        gap: 5px;
        align-items: flex-start;
    }

    .btn-hospital {
        font-size: 1rem;
        font-weight: 600;
        border-radius: 8px;
        transition: background-color 0.3s ease, transform 0.2s ease;
        text-decoration: none;
        color: white;
        box-shadow: 0 4px 6px rgba(0, 0, 0, 0.1);
        padding: 0;
        display: block;
    }

        .btn-hospital button {
            background: none;
            border: none;
            font-size: 1rem;
            font-weight: 600;
            color: white;
            padding: 10px 20px;
            width: 100%;
            display: flex;
            align-items: center;
            justify-content: center;
            gap: 10px;
            cursor: pointer;
            border-radius: 8px;
        }

    .btn-primary {
        background-color: #0077cc;
    }

    .btn-success {
        background-color: #28a745;
    }

    .btn-info {
        background-color: #17a2b8;
    }

    .btn-warning {
        background-color: #ffc107;
    }

    .btn-secondary {
        background-color: #6c757d;
    }

    .btn-danger {
        background-color: #dc3545;
    }

    .btn-hospital:hover {
        transform: scale(1.05);
        filter: brightness(1.1);
    }

    .btn-hospital button i {
        font-size: 1.2rem;
    }

    /* Table Styles */
    .department-table {
        width: 100%;
        border-collapse: collapse;
        margin-top: 30px;
        background: #fff;
        border-radius: 10px;
        box-shadow: 0 4px 10px rgba(0, 0, 0, 0.1);
    }

    .table-header th {
        background-color: #0077cc;
        color: white;
        padding: 12px 15px;
        text-align: left;
        font-weight: 600;
    }

    .department-table td, .department-table th {
        padding: 12px 15px;
        border-bottom: 1px solid #ddd;
    }

    .department-table tr:hover {
        background-color: #f9f9f9;
    }

    .action-buttons {
        display: flex;
        gap: 10px;
    }

    .btn-approve {
        background-color: #28a745;
        color: white;
        padding: 8px 15px;
        border-radius: 6px;
        text-decoration: none;
        transition: background-color 0.3s ease;
    }

        .btn-approve:hover {
            background-color: #218838;
        }

    .btn-cancel {
        background-color: #dc3545;
        color: white;
        padding: 8px 15px;
        border-radius: 6px;
        text-decoration: none;
        transition: background-color 0.3s ease;
    }

        .btn-cancel:hover {
            background-color: #c82333;
        }

    .no-appointments {
        text-align: center;
        margin-top: 30px;
        padding: 20px;
        background: #fff;
        border-radius: 10px;
        box-shadow: 0 4px 10px rgba(0, 0, 0, 0.1);
    }

        .no-appointments p {
            font-size: 1.2rem;
            color: #555;
            margin-bottom: 15px;
        }
</style>

<div class="container">
    <div class="text-center">
        <h1 class="page-title">Welcome to Mini Hospital</h1>
        <p class="description-text">Caring for your health with expertise and compassion.</p>
    </div>

    <div class="content-section">
        <div class="content-image">
            <img src="~/css/images/hospital.png" alt="Hospital Image">
        </div>
        <div class="content-text">
            <div class="text-content">
                Mini Hospital is dedicated to providing high-quality medical care to all our patients.
                Our team of experienced doctors, nurses, and healthcare professionals ensures
                that every patient receives the best treatment possible. Whether you need an appointment,
                specialist consultation, or emergency care, we are here for you 24/7.
            </div>
            <div class="options-container">
                <div class="options-list">
                    <a class="btn btn-primary btn-hospital" href="@Url.Action("DoctorsByDepartment", "Doctors")">
                        <button><i class="fas fa-calendar-check"></i> Make an appointment</button>
                    </a>
                    <a class="btn btn-success btn-hospital" href="@Url.Action("Index", "Doctors")">
                        <button><i class="fas fa-user-md"></i> All doctors</button>
                    </a>
                    <a class="btn btn-info btn-hospital" href="@Url.Action("Index", "Appointments")">
                        <button><i class="fas fa-file-medical"></i> View appointments</button>
                    </a>
                </div>
            </div>
        </div>
    </div>
</div>

@if (Model is not null && Model.Appointments != null && Model.Appointments.Any())
{
    <table class="department-table">
        <thead class="table-header">
            <tr>
                <th>Date</th>
                <th>Time</th>
                <th>Reason</th>
                <th>Doctor Name</th>
                <th>Patient Name</th>
                <th>Room Type</th>
                <th>Appointment State</th>
                <th>Actions</th>
                @if (canApproveAny)
                {
                    <th>Approval</th>
                }
                @if (canCancelAny)
                {
                    <th>Cancellation</th>
                }
            </tr>
        </thead>
        <tbody>
            @foreach (var item in Model.Appointments)
            {
                var state = HospitalDomain.Utils.AppointmentStates.States
                .FirstOrDefault(s => s.Item1 == item.AppointmentState)?.Item2 ?? "Unknown";
                var stateClass = $"state-{state.ToLower()}";

                <tr>
                    <td>@Html.DisplayFor(modelItem => item.Date)</td>
                    <td>@Html.DisplayFor(modelItem => item.Time)</td>
                    <td>@Html.DisplayFor(modelItem => item.Reason)</td>
                    <td>
                        @Html.ActionLink(item.DoctorNavigation.Name, "Details", "Doctors", new { Id = item.DoctorNavigation.Id }, new { @class = "action-link" })
                    </td>
                    <td>
                        @if (Utils.CheckRole.IsInRoles(User, new string[] { Utils.Constants.Admin, Utils.Constants.Manager }))
                        {
                            @Html.ActionLink(item.PatientNavigation.Name, "Details", "Patients", new { Id = item.PatientNavigation.Id }, new { @class = "action-link" })
                        }
                        else
                        {
                            @Html.DisplayFor(modelItem => item.PatientNavigation.Name)
                        }
                    </td>
                    <td>
                        @if (item.RoomNavigation != null)
                        {
                            @Html.ActionLink(item.RoomNavigation.Type, "Details", "Rooms", new { Id = item.RoomNavigation.Id }, new { @class = "action-link" })
                        }
                    </td>
                    <td><span class="@stateClass">@state</span></td>
                    <td class="action-buttons">
                        @if (item.AppointmentState < 3)
                        {
                            <a href="@Url.Action("Edit", "Appointments", new { id = item.Id })" class="btn-action btn-edit action-link">Edit</a>
                        }
                        | <a href="@Url.Action("Details", "Appointments", new { id = item.Id })" class="btn-action btn-details action-link">Details</a> |
                        @if (Utils.CheckRole.IsInRoles(User, new string[] { Utils.Constants.Admin, Utils.Constants.Manager }))
                        {
                            <a href="@Url.Action("Delete", "Appointments", new { id = item.Id })" class="btn-action btn-delete action-link">Delete</a>
                        }
                    </td>
                    @if (canApproveAny)
                    {
                        <td>
                            @{
                                var isAuthorized = Utils.CheckRole.IsInRoles(User, new string[] { Utils.Constants.Admin, Utils.Constants.Manager });
                                var canApprove = isAuthorized && item.AppointmentState == 1;
                            }
                            @if (canApprove)
                            {
                                <a onclick="approve(@item.Id)" class="btn-approve">Approve</a>
                            }
                        </td>
                    }
                    @if (canCancelAny)
                    {
                        <td>
                            @{
                                var isAuthorized = Utils.CheckRole.IsInRoles(User, new string[] { Utils.Constants.Admin, Utils.Constants.Manager, Utils.Constants.Doctor });
                                var canCancel = isAuthorized && item.AppointmentState <= 3;
                            }
                            @if (canCancel)
                            {
                                <a onclick="cancel(@item.Id)" class="btn-cancel">Cancel</a>
                            }
                        </td>
                    }
                </tr>
            }
        </tbody>
    </table>
}